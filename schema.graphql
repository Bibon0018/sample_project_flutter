schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "auth.account_roles"
"""
type auth_account_roles {
  """An object relationship"""
  account: auth_accounts!
  account_id: uuid!
  created_at: timestamptz!
  id: uuid!
  role: auth_roles_enum!

  """An object relationship"""
  roleByRole: auth_roles!
}

"""
Boolean expression to filter rows from the table "auth.account_roles". All fields are combined with a logical 'AND'.
"""
input auth_account_roles_bool_exp {
  _and: [auth_account_roles_bool_exp]
  _not: auth_account_roles_bool_exp
  _or: [auth_account_roles_bool_exp]
  account: auth_accounts_bool_exp
  account_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  role: auth_roles_enum_comparison_exp
  roleByRole: auth_roles_bool_exp
}

"""
ordering options when selecting data from "auth.account_roles"
"""
input auth_account_roles_order_by {
  account: auth_accounts_order_by
  account_id: order_by
  created_at: order_by
  id: order_by
  role: order_by
  roleByRole: auth_roles_order_by
}

"""
primary key columns input for table: "auth.account_roles"
"""
input auth_account_roles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.account_roles"
"""
enum auth_account_roles_select_column {
  """column name"""
  account_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  role
}

"""
columns and relationships of "auth.accounts"
"""
type auth_accounts {
  """An array relationship"""
  account_roles(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): [auth_account_roles!]!
  active: Boolean!
  created_at: timestamptz!
  custom_register_data(
    """JSON select path"""
    path: String
  ): jsonb
  default_role: auth_roles_enum!
  email: citext
  firebase_uid: String
  id: uuid!
  is_anonymous: Boolean!
  mfa_enabled: Boolean!
  new_email: citext
  otp_secret: String
  password_hash: String
  phone_number: String

  """An object relationship"""
  role: auth_roles!
  ticket: uuid!
  ticket_expires_at: timestamptz!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
Boolean expression to filter rows from the table "auth.accounts". All fields are combined with a logical 'AND'.
"""
input auth_accounts_bool_exp {
  _and: [auth_accounts_bool_exp]
  _not: auth_accounts_bool_exp
  _or: [auth_accounts_bool_exp]
  account_roles: auth_account_roles_bool_exp
  active: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  custom_register_data: jsonb_comparison_exp
  default_role: auth_roles_enum_comparison_exp
  email: citext_comparison_exp
  firebase_uid: String_comparison_exp
  id: uuid_comparison_exp
  is_anonymous: Boolean_comparison_exp
  mfa_enabled: Boolean_comparison_exp
  new_email: citext_comparison_exp
  otp_secret: String_comparison_exp
  password_hash: String_comparison_exp
  phone_number: String_comparison_exp
  role: auth_roles_bool_exp
  ticket: uuid_comparison_exp
  ticket_expires_at: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.accounts"
"""
enum auth_accounts_constraint {
  """unique or primary key constraint"""
  accounts_email_key

  """unique or primary key constraint"""
  accounts_new_email_key

  """unique or primary key constraint"""
  accounts_pkey

  """unique or primary key constraint"""
  accounts_user_id_key
}

"""
response of any mutation on the table "auth.accounts"
"""
type auth_accounts_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [auth_accounts!]!
}

"""
on conflict condition type for table "auth.accounts"
"""
input auth_accounts_on_conflict {
  constraint: auth_accounts_constraint!
  update_columns: [auth_accounts_update_column!]!
  where: auth_accounts_bool_exp
}

"""
ordering options when selecting data from "auth.accounts"
"""
input auth_accounts_order_by {
  active: order_by
  created_at: order_by
  custom_register_data: order_by
  default_role: order_by
  email: order_by
  firebase_uid: order_by
  id: order_by
  is_anonymous: order_by
  mfa_enabled: order_by
  new_email: order_by
  otp_secret: order_by
  password_hash: order_by
  phone_number: order_by
  role: auth_roles_order_by
  ticket: order_by
  ticket_expires_at: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: "auth.accounts"
"""
input auth_accounts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.accounts"
"""
enum auth_accounts_select_column {
  """column name"""
  active

  """column name"""
  created_at

  """column name"""
  custom_register_data

  """column name"""
  default_role

  """column name"""
  email

  """column name"""
  firebase_uid

  """column name"""
  id

  """column name"""
  is_anonymous

  """column name"""
  mfa_enabled

  """column name"""
  new_email

  """column name"""
  otp_secret

  """column name"""
  password_hash

  """column name"""
  phone_number

  """column name"""
  ticket

  """column name"""
  ticket_expires_at

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "auth.accounts"
"""
input auth_accounts_set_input {
  email: citext
}

"""
update columns of table "auth.accounts"
"""
enum auth_accounts_update_column {
  """column name"""
  email
}

"""
columns and relationships of "auth.roles"
"""
type auth_roles {
  """An array relationship"""
  account_roles(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): [auth_account_roles!]!

  """An array relationship"""
  accounts(
    """distinct select on columns"""
    distinct_on: [auth_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_accounts_order_by!]

    """filter the rows returned"""
    where: auth_accounts_bool_exp
  ): [auth_accounts!]!
  role: String!
}

"""
Boolean expression to filter rows from the table "auth.roles". All fields are combined with a logical 'AND'.
"""
input auth_roles_bool_exp {
  _and: [auth_roles_bool_exp]
  _not: auth_roles_bool_exp
  _or: [auth_roles_bool_exp]
  account_roles: auth_account_roles_bool_exp
  accounts: auth_accounts_bool_exp
  role: String_comparison_exp
}

enum auth_roles_enum {
  anonymous
  user
}

"""
expression to compare columns of type auth_roles_enum. All fields are combined with logical 'AND'.
"""
input auth_roles_enum_comparison_exp {
  _eq: auth_roles_enum
  _in: [auth_roles_enum!]
  _is_null: Boolean
  _neq: auth_roles_enum
  _nin: [auth_roles_enum!]
}

"""
ordering options when selecting data from "auth.roles"
"""
input auth_roles_order_by {
  role: order_by
}

"""
primary key columns input for table: "auth.roles"
"""
input auth_roles_pk_columns_input {
  role: String!
}

"""
select columns of table "auth.roles"
"""
enum auth_roles_select_column {
  """column name"""
  role
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

scalar citext

"""
expression to compare columns of type citext. All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext
  _ilike: String
  _in: [citext!]
  _is_null: Boolean
  _like: String
  _lt: citext
  _lte: citext
  _neq: citext
  _nilike: String
  _nin: [citext!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

scalar jsonb

"""
expression to compare columns of type jsonb. All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  insert data into the table: "news"
  """
  insert_news(
    """the rows to be inserted"""
    objects: [news_insert_input!]!

    """on conflict condition"""
    on_conflict: news_on_conflict
  ): news_mutation_response

  """
  insert a single row into the table: "news"
  """
  insert_news_one(
    """the row to be inserted"""
    object: news_insert_input!

    """on conflict condition"""
    on_conflict: news_on_conflict
  ): news

  """
  update data of the table: "auth.accounts"
  """
  update_auth_accounts(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_accounts_set_input

    """filter the rows which have to be updated"""
    where: auth_accounts_bool_exp!
  ): auth_accounts_mutation_response

  """
  update single row of the table: "auth.accounts"
  """
  update_auth_accounts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: auth_accounts_set_input
    pk_columns: auth_accounts_pk_columns_input!
  ): auth_accounts

  """
  update data of the table: "news"
  """
  update_news(
    """sets the columns of the filtered rows to the given values"""
    _set: news_set_input

    """filter the rows which have to be updated"""
    where: news_bool_exp!
  ): news_mutation_response

  """
  update single row of the table: "news"
  """
  update_news_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: news_set_input
    pk_columns: news_pk_columns_input!
  ): news

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""
Новости


columns and relationships of "news"
"""
type news {
  """An object relationship"""
  author: users

  """Содержание новости"""
  content: String!
  created_at: timestamptz!
  id: uuid!

  """Заголовок новости"""
  title: String!
  updated_at: timestamptz!
  user_id: uuid
}

"""
input type for inserting array relation for remote table "news"
"""
input news_arr_rel_insert_input {
  data: [news_insert_input!]!
  on_conflict: news_on_conflict
}

"""
Boolean expression to filter rows from the table "news". All fields are combined with a logical 'AND'.
"""
input news_bool_exp {
  _and: [news_bool_exp]
  _not: news_bool_exp
  _or: [news_bool_exp]
  author: users_bool_exp
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "news"
"""
enum news_constraint {
  """unique or primary key constraint"""
  news_pkey
}

"""
input type for inserting data into table "news"
"""
input news_insert_input {
  content: String
  title: String
}

"""
response of any mutation on the table "news"
"""
type news_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [news!]!
}

"""
input type for inserting object relation for remote table "news"
"""
input news_obj_rel_insert_input {
  data: news_insert_input!
  on_conflict: news_on_conflict
}

"""
on conflict condition type for table "news"
"""
input news_on_conflict {
  constraint: news_constraint!
  update_columns: [news_update_column!]!
  where: news_bool_exp
}

"""
ordering options when selecting data from "news"
"""
input news_order_by {
  author: users_order_by
  content: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""
primary key columns input for table: "news"
"""
input news_pk_columns_input {
  id: uuid!
}

"""
select columns of table "news"
"""
enum news_select_column {
  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "news"
"""
input news_set_input {
  content: String
  id: uuid
  title: String
}

"""
update columns of table "news"
"""
enum news_update_column {
  """column name"""
  content

  """column name"""
  id

  """column name"""
  title
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "auth.account_roles"
  """
  auth_account_roles(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): [auth_account_roles!]!

  """
  fetch data from the table: "auth.account_roles" using primary key columns
  """
  auth_account_roles_by_pk(id: uuid!): auth_account_roles

  """
  fetch data from the table: "auth.accounts"
  """
  auth_accounts(
    """distinct select on columns"""
    distinct_on: [auth_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_accounts_order_by!]

    """filter the rows returned"""
    where: auth_accounts_bool_exp
  ): [auth_accounts!]!

  """fetch data from the table: "auth.accounts" using primary key columns"""
  auth_accounts_by_pk(id: uuid!): auth_accounts

  """
  fetch data from the table: "auth.roles"
  """
  auth_roles(
    """distinct select on columns"""
    distinct_on: [auth_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_roles_order_by!]

    """filter the rows returned"""
    where: auth_roles_bool_exp
  ): [auth_roles!]!

  """fetch data from the table: "auth.roles" using primary key columns"""
  auth_roles_by_pk(role: String!): auth_roles

  """
  fetch data from the table: "news"
  """
  news(
    """distinct select on columns"""
    distinct_on: [news_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [news_order_by!]

    """filter the rows returned"""
    where: news_bool_exp
  ): [news!]!

  """fetch data from the table: "news" using primary key columns"""
  news_by_pk(id: uuid!): news

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "auth.account_roles"
  """
  auth_account_roles(
    """distinct select on columns"""
    distinct_on: [auth_account_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_account_roles_order_by!]

    """filter the rows returned"""
    where: auth_account_roles_bool_exp
  ): [auth_account_roles!]!

  """
  fetch data from the table: "auth.account_roles" using primary key columns
  """
  auth_account_roles_by_pk(id: uuid!): auth_account_roles

  """
  fetch data from the table: "auth.accounts"
  """
  auth_accounts(
    """distinct select on columns"""
    distinct_on: [auth_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_accounts_order_by!]

    """filter the rows returned"""
    where: auth_accounts_bool_exp
  ): [auth_accounts!]!

  """fetch data from the table: "auth.accounts" using primary key columns"""
  auth_accounts_by_pk(id: uuid!): auth_accounts

  """
  fetch data from the table: "auth.roles"
  """
  auth_roles(
    """distinct select on columns"""
    distinct_on: [auth_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auth_roles_order_by!]

    """filter the rows returned"""
    where: auth_roles_bool_exp
  ): [auth_roles!]!

  """fetch data from the table: "auth.roles" using primary key columns"""
  auth_roles_by_pk(role: String!): auth_roles

  """
  fetch data from the table: "news"
  """
  news(
    """distinct select on columns"""
    distinct_on: [news_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [news_order_by!]

    """filter the rows returned"""
    where: news_bool_exp
  ): [news!]!

  """fetch data from the table: "news" using primary key columns"""
  news_by_pk(id: uuid!): news

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  """An object relationship"""
  account: auth_accounts
  avatar_url: String
  created_at: timestamptz!
  display_name: String
  id: uuid!
  phone_number: String
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  account: auth_accounts_bool_exp
  avatar_url: String_comparison_exp
  created_at: timestamptz_comparison_exp
  display_name: String_comparison_exp
  id: uuid_comparison_exp
  phone_number: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users!]!
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  account: auth_accounts_order_by
  avatar_url: order_by
  created_at: order_by
  display_name: order_by
  id: order_by
  phone_number: order_by
  updated_at: order_by
}

"""
primary key columns input for table: "users"
"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  avatar_url

  """column name"""
  created_at

  """column name"""
  display_name

  """column name"""
  id

  """column name"""
  phone_number

  """column name"""
  updated_at
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  avatar_url: String
  created_at: timestamptz
  display_name: String
  phone_number: String
  updated_at: timestamptz
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  avatar_url

  """column name"""
  created_at

  """column name"""
  display_name

  """column name"""
  phone_number

  """column name"""
  updated_at
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
